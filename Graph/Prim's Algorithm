
/*1. Minimum Spanning Tree (MST)
A Minimum Spanning Tree (MST) is a subset of edges of a connected, weighted, undirected graph that connects all the vertices without any cycles and with the minimum possible total edge weight. An MST has (V-1) edges, where V is the number of vertices in the graph.

2. Prim's Algorithm (in Brief)
Primâ€™s Algorithm is a greedy algorithm that finds an MST for a weighted, undirected graph. It starts with a single node and adds edges to form the MST by choosing the minimum weight edge that connects a vertex in the MST to a vertex outside the MST. The process continues until all vertices are included in the MST.

3. Data Structures Involved
Data structures are used:

Vector key[]: Stores the minimum weight edge connecting each vertex to the MST.
Vector mst[]: A boolean array to track which vertices are included in the MST.
Vector parent[]: Stores the parent of each vertex in the MST.
Adjacency List adj[][]: Represents the graph, where each vertex has a list of edges connected to it.*/


// Code//

#include <iostream>
#include <vector>
#include <climits>

using namespace std;

class Solution {
public:
    int getMinValueNode(vector<int>& key, vector<bool>& mst) {
        int temp = INT_MAX;    // Initialize with maximum integer value
        int index = -1;         // To store the actual node having min value, and mst ==false means that node is still not added in mst
        for (int i = 0; i < key.size(); ++i) {
            if (key[i] < temp && mst[i] == false) {
                temp = key[i];
                index = i;
            }
        }
        return index;
    }

    // Function to find the sum of weights of edges of the MST
    int spanningTree(int V, vector<vector<int>> adj[]) {
        vector<int> key(V, INT_MAX);       // Initialize keys as infinite
        vector<bool> mst(V, false);        // To keep track of vertices included in MST
        vector<int> parent(V, -1);         // Stores the MST structure

        key[0] = 0; // Start from the first vertex

        while (true) {
            // Step 1: Pick the minimum key node
            int u = getMinValueNode(key, mst);
            if (u == -1) break;

            // Step 2: Include the picked vertex in MST
            mst[u] = true;

            // Step 3: Process all adjacent nodes of u
            for (auto edge : adj[u]) {
                int v = edge[0];
                int w = edge[1];
                if (mst[v] == false && w < key[v]) {
                    key[v] = w;
                    parent[v] = u;
                }
            }
        }

        // Calculate the sum of weights of the edges in the MST
        int sum = 0;
        for (int u = 1; u < parent.size(); ++u) {
            if (parent[u] != -1) {
                for (auto edge : adj[u]) {
                    int v = edge[0];
                    int w = edge[1];
                    if (v == parent[u]) {
                        sum += w;
                        break;
                    }
                }
            }
        }
        return sum;
    }
};
